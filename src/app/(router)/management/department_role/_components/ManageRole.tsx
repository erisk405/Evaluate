"use client";
import React, { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  BadgeAlert,
  BadgeCheck,
  Dot,
  Loader,
  Plus,
  Settings2,
  ShieldPlus,
} from "lucide-react";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import FilterSection from "./FormOption";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import useStore from "@/app/store/store";

import { object, z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import GlobalApi, { handleErrorOnAxios } from "@/app/_util/GlobalApi";
import EditRoleDialog from "./EditRoleDialog";
import { toast } from "@/components/ui/use-toast";
import { useThemeStyles } from "@/hooks/useTheme";

const formSchema = z.object({
  roleName: z
    .string()
    .min(5, { message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" }) // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    .max(50, { message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" }), // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  description: z
    .string()
    .min(10, { message: "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" }) // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    .max(100, { message: "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" }), // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  roleLevel: z.enum(["LEVEL_1", "LEVEL_2", "LEVEL_3", "LEVEL_4"], {
    required_error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ",
  }),
});

// Define the type for a single permission
type Permission = {
  internal: string[];
  external: string[];
};

// Define the type for the permissions state
type Permissions = {
  [key: string]: Permission;
};

const ManageRole = () => {
  const { roles, setRole } = useStore();
  const styles = useThemeStyles();
  const [permissions, setPermissions] = useState<Permissions>(
    roles
      .filter(
        (role) => role.role_name !== "admin" && role.role_name !== "member"
      )
      .reduce(
        (acc, role) => ({
          ...acc,
          [role.role_name]: { id: role.id, internal: [], external: [] },
        }),
        {} as Permissions
      )
  );
  const [loading, setLoading] = useState(false);
  const [open, setOpen] = useState(false);
  const [openUpdate, setOpenUpdate] = useState(false);
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      roleName: "",
      description: "", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö description
      roleLevel: undefined,
    },
  });
  const fetchRole = async () => {
    try {
      const response = await GlobalApi.getRole();
      // update Role ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
      setRole(response?.data);
    } catch (error) {
      console.log({ messsage: error });
    }
  };
  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      setLoading(true);
      const newRole = await GlobalApi.createRole(values);
      const permissionsKeys = Object.keys(permissions); //‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå permissions ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ô‡∏±‡πâ‡∏ô
      if (permissionsKeys.length > 0) {
        const assessorId: string = newRole?.data?.id;
        const newPermission = await GlobalApi.createPermission(
          permissions,
          assessorId
        );
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏óRole
      fetchRole();
      setLoading(false);
      setOpen(false); // ‡∏õ‡∏¥‡∏î Dialog ‡πÄ‡∏°‡∏∑‡πà‡∏≠ loading ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      toast({
        title: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ",
        description: "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Role ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      });
    } catch (error) {
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: (
          <pre className="mt-2 w-[340px] rounded-md bg-slate-950 p-4 overflow-x-auto">
            <code className="text-white whitespace-pre-wrap break-words">
              {JSON.stringify({ message: error }, null, 2)}
            </code>
          </pre>
        ),
      });
    }
  };
  const onUpdate = async (values: any, id: string) => {
    try {
      // --------------------------------------------
      // update ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Role ‡∏û‡∏ß‡∏Å ‡∏ä‡∏∑‡πà‡∏≠ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞ Level
      // --------------------------------------------
      const payload = {
        role_id: id,
        roleName: values.roleName,
        description: values.description,
        roleLevel: values.roleLevel,
      };
      setLoading(true);
      const response = await GlobalApi.updateRole(payload);
      if (!response) {
        throw new Error("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      }

      // -----------------------------------------------------
      // update ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Role ‡∏û‡∏ß‡∏Å permission ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ form ‡∏ï‡πà‡∏≤‡∏á‡πÜ
      // -----------------------------------------------------
      const data = {
        assessorId: id,
        permissions,
      };
      const responsePermis = await GlobalApi.updatePermission(data);
      if (!response) {
        throw new Error("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      }
      fetchRole();
      setLoading(false);
      setOpenUpdate(false); // ‡∏õ‡∏¥‡∏î Dialog ‡πÄ‡∏°‡∏∑‡πà‡∏≠ loading ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô

      toast({
        title: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ",
        description: (
          <pre className="mt-2 w-[340px] rounded-md bg-slate-950 p-4 overflow-x-auto">
            <code className="text-white whitespace-pre-wrap break-words">
              {JSON.stringify(responsePermis?.data.message, null, 2)}
            </code>
          </pre>
        ),
      });
    } catch (error) {
      handleErrorOnAxios(error);
    }
  };

  const deleteRole = async (id: string) => {
    toast({
      title: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
      description: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    });
    try {
      const response = await GlobalApi.deleteRole(id);
      if (response && response.status === 201) {
        toast({
          title: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ",
          description: "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏•‡∏ö ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        });
      }
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó roles ‡πÉ‡∏ô store ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const updatedRoles = roles.filter((role) => role.id !== id);
      setRole(updatedRoles);
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó permissions state ‡∏î‡πâ‡∏ß‡∏¢
      setPermissions({});
    } catch (error: any) {
      console.log("error", { message: error });

      toast({
        title:
          "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÑ‡∏´‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâRole ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà",
        description: (
          <pre className="mt-2 w-[340px] rounded-md bg-slate-950 p-4 overflow-x-auto">
            <code className="text-white whitespace-pre-wrap break-words">
              {JSON.stringify(error?.response?.data?.message, null, 2)}
            </code>
          </pre>
        ),
      });
    }
  };

  // function ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö JSON ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
  const handleFilterChange = (
    roleID: string,
    roleName: string, // ‡∏≠‡∏±‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏µ‡πà role id ‡∏≠‡∏∞‡πÑ‡∏£
    type: "internal" | "external", //‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
    newValues: string[] // id ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Server
  ) => {
    setPermissions((prev) => ({
      ...prev,
      [roleName]: {
        ...prev[roleName], // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ ‡∏ï‡∏≠‡∏ôSet‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏´‡∏≤‡∏¢
        ["id"]: roleID,
        [type]: newValues,
      } as any,
    }));
  };

  return (
    <div className={`@container ${styles.text}`}>
      <div className="flex justify-between items-center my-3">
        <h2 className="text-3xl">
          <span>üéì</span>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£<span className="text-blue-400">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</span>
        </h2>
      </div>
      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏áRole */}
      <div className="grid grid-cols-3 gap-3">
        <p className={`${styles.text_description} col-span-2`}>
          ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
        </p>

        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button variant="outline" className="p-2 active:scale-95">
              <Plus />
              ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            </Button>
          </DialogTrigger>

          <DialogContent className="sm:max-w-[625px]">
            <DialogHeader>
              <DialogTitle>
                <div className="flex gap-2 items-center">
                  <div className="block p-1 bg-blue-100 rounded-full">
                    <ShieldPlus size={40} className="text-blue-500 " />{" "}
                  </div>
                  <h2 className="text-xl">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</h2>
                </div>
              </DialogTitle>
              <DialogDescription>
                ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="grid gap-4 py-4 px-4"
              >
                {/* Role name */}
                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <FormField
                      control={form.control}
                      name="roleName"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</FormLabel>
                          <FormControl>
                            <Input placeholder="‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ..." {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  {/* Role level */}
                  <div>
                    <div>
                      <FormField
                        control={form.control}
                        name="roleLevel"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏£‡∏∞‡∏î‡∏±‡∏ö</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger className="w-full ">
                                  <SelectValue placeholder="Select a level " />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="LEVEL_1">
                                  Level 1 {"(‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)"}
                                </SelectItem>
                                <SelectItem value="LEVEL_2">
                                  Level 2{" "}
                                  {
                                    "(‡∏î‡∏π‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ)"
                                  }
                                </SelectItem>
                                <SelectItem value="LEVEL_3">
                                  Level 3 {"(‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ)"}
                                </SelectItem>
                                <SelectItem value="LEVEL_4">
                                  Level 4 {"(‡∏î‡∏π‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ)"}
                                </SelectItem>
                              </SelectContent>
                            </Select>
                          </FormItem>
                        )}
                      ></FormField>
                    </div>
                  </div>
                </div>
                <hr />
                {/* body header */}
                <div className="flex items-center gap-2 font-semibold">
                  <BadgeAlert className="text-blue-500 bg-white rounded-full " />{" "}
                  <h2>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•</h2>
                </div>
                {/* Set role permission form evaluate */}
                <div className="grid grid-cols-4 items-center shadow-inner p-2 gap-4 overflow-scroll h-[35dvh] scrollbar-gemini rounded-lg">
                  {roles.map(
                    (item) =>
                      item.role_name !== "admin" &&
                      item.role_name !== "member" && (
                        <div className="col-span-2 " key={item.id}>
                          <Label
                            htmlFor="permission"
                            className="text-left col-span-2"
                          >
                            {item.role_name}
                          </Label>
                          <div className="w-full mt-2">
                            <div className="ml-4">
                              <h2 className="text-sm">‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô</h2>
                              <FilterSection
                                selectedValues={
                                  permissions[item.role_name]?.internal || []
                                }
                                setSelectedValues={(newValues) =>
                                  handleFilterChange(
                                    item.id,
                                    item.role_name,
                                    "internal",
                                    newValues
                                  )
                                }
                              />
                            </div>
                            <div className="ml-4 mt-2">
                              <h2 className="text-sm">‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô</h2>
                              <FilterSection
                                selectedValues={
                                  permissions[item.role_name]?.external || []
                                }
                                setSelectedValues={(newValues) =>
                                  handleFilterChange(
                                    item.id,
                                    item.role_name,
                                    "external",
                                    newValues
                                  )
                                }
                              />
                            </div>
                          </div>
                        </div>
                      )
                  )}
                </div>
                {/* discription */}
                <div className="grid w-full gap-1.5">
                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <Label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ</Label>
                        <FormControl>
                          <Textarea
                            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                            {...field}
                          />
                        </FormControl>
                        <p className="text-sm text-muted-foreground">
                          ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
                        </p>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {!loading ? (
                  <Button type="submit">Save Change</Button>
                ) : (
                  <Button className="animate-pulse" type="button">
                    <Loader className="animate-spin" />
                  </Button>
                )}
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      {/* --------------------------------------------------------- */}
      {/*                ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏ÇRole                    */}
      {/* --------------------------------------------------------- */}
      {/* <UpdateRole /> */}
      <div className="flex flex-col">
        <Accordion type="single" collapsible className="w-full">
          {roles.map(
            (item) =>
              item.role_name !== "admin" &&
              item.role_name !== "member" && (
                <AccordionItem value={item.id} key={item.id}>
                  <AccordionTrigger>
                    <div
                      className={`px-3 w-full h-14 rounded-xl flex justify-between items-center ${styles.text}`}
                    >
                      <div className="flex items-center gap-1">
                        <BadgeCheck className="text-white bg-blue-500 overflow-hidden rounded-full" />
                        <h2 className="text-lg ">{item.role_name}</h2>
                      </div>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="w-full">
                      <div className="pl-10">
                        <div className="grid grid-cols-2 @[30rem]:grid-cols-3 gap-3 ">
                          {item.permissionsAsAssessor?.map((element, index) => (
                            <div
                              className="border-b pb-3"
                              key={"Assessor" + index}
                            >
                              <div className="font-bold">
                                {element.evaluatorRole
                                  ? element.evaluatorRole.role_name
                                  : "Unknown Role"}
                              </div>
                              <div className="">
                                <div className="mt-1 flex items-center">
                                  <Dot strokeWidth={4} />
                                  <h2>‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô</h2>
                                </div>
                                <div className="ml-3 border-l border-gray-400 pl-2">
                                  {element.permissionForm.length ? (
                                    element.permissionForm // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤ Role ‡∏ô‡∏µ‡πâ‡∏°‡∏µpermission ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á
                                      .filter((p) => p.ingroup == true)
                                      .map((form, index) => (
                                        <div key={"FormId" + index}>
                                          - {form.form.name}
                                        </div>
                                      ))
                                  ) : (
                                    <div>
                                      <h2 className="text-red-500">
                                        ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                                      </h2>
                                    </div>
                                  )}
                                </div>
                                <div className="mt-1 flex items-center">
                                  <Dot strokeWidth={4} />
                                  <h2>‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô</h2>
                                </div>
                                <div className="ml-3 border-l border-gray-400 pl-2">
                                  {element.permissionForm.length ? (
                                    element.permissionForm // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤ Role ‡∏ô‡∏µ‡πâ‡∏°‡∏µpermission ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á
                                      .filter((p) => p.ingroup == false)
                                      .map((form, index) => (
                                        <div key={"FormId" + index}>
                                          - {form.form.name}
                                        </div>
                                      ))
                                  ) : (
                                    <div>
                                      <h2 className="text-red-500">
                                        ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                                      </h2>
                                    </div>
                                  )}
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                        <p className="text-md mt-3">
                          <span className="font-bold">Description :</span>{" "}
                          {item.description}
                        </p>
                      </div>
                      <div className="w-full flex justify-end gap-3 mt-2">
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button className="flex items-center gap-2 px-2 h-9 active:scale-95">
                              ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>
                                ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏¶
                              </AlertDialogTitle>
                              <AlertDialogDescription className="text-red-500">
                                ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ
                                ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ
                                ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => deleteRole(item.id)}
                              >
                                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                        <Dialog open={openUpdate} onOpenChange={setOpenUpdate}>
                          <DialogTrigger asChild>
                            <Button className="flex items-center gap-2 px-2 h-9 active:scale-95">
                              <Settings2 size={18} /> ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                            </Button>
                          </DialogTrigger>
                          <DialogContent className="sm:max-w-[625px]">
                            <DialogHeader>
                              <DialogTitle>
                                <div className="flex gap-2 items-center">
                                  <div className="block p-1 bg-blue-100 rounded-full">
                                    <ShieldPlus
                                      size={40}
                                      className="text-blue-500"
                                    />
                                  </div>
                                  <h2 className="text-xl">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</h2>
                                </div>
                              </DialogTitle>
                              <DialogDescription>
                                ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                              </DialogDescription>
                            </DialogHeader>
                            <EditRoleDialog
                              role={item} //‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ item ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á role ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏õ‡∏¢‡∏±‡∏á EditRoleDialog component
                              onUpdate={onUpdate} //‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô onUpdate ‡πÑ‡∏õ‡πÉ‡∏´‡πâ EditRoleDialog ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ component ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role
                              permissions={permissions} //‡∏Ñ‡πà‡∏≤ permissions ‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ component ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ permissions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ permissions ‡πÑ‡∏î‡πâ
                              handleFilterChange={handleFilterChange} //‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleFilterChange ‡πÑ‡∏õ‡∏¢‡∏±‡∏á EditRoleDialog ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ component ‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á component ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á (filter) ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á ‡πÜ
                              roles={roles} //‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ roles ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å role ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á EditRoleDialog
                              loading={loading}
                            />
                          </DialogContent>
                        </Dialog>
                      </div>
                    </div>
                  </AccordionContent>
                </AccordionItem>
              )
          )}
        </Accordion>
      </div>
    </div>
  );
};

export default ManageRole;
